
The program must accept N string values as the input. The program must print the string having
maximum number of consonants among the N string values as the output. If more than one string
values have the maximum number of consonants then the program must print the first occurring
string.
Note: At least one string will always contain one consonant.
Boundary Condition(s):
1 <= N <= 100
1 <= Length of each string <= 100
Input Format:
The first line contains N.
The next N lines, each contains a string.
Output Format:
The first line contains the string having maximum number of consonants based on the above
conditions.
Example Input/Output 1:
Input:
3
burger
sandwich
pizza
Output:
sandwich
Explanation:
The string "burger" has 4 consonants.
The string "sandwich" has 6 consonants.
The string "pizza" has 3 consonants.
Here the string "sandwich" has the maximum number of consonants among the other string values.
Hence the output is sandwich
Example Input/Output 2:
Input:
5
CALCIUM
SULPHATE
SODIUM
POTASSIUM
CATS
Output:
SULPHATE





Code :

import java.util.*;
public class Hello {
    
    public static int isvowel(char ch)
    {
        if(ch=='a' || ch=='A' || ch=='e' || ch=='E' || ch=='i' || ch=='I' || ch=='o' || ch=='O' || ch=='u' || ch=='U')
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }

    public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		String[] arr=new String[n];
		int max=0;
		String s="";
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.next();
            int l=arr[i].length();
            int cnt=0;
            for(int j=0;j<l;j++)
            {
                if(isvowel(arr[i].charAt(j))==-1)
                {
                    cnt++;
                }
            }
            if(cnt>max)
            {
                s="";
                max=cnt;
                s+=arr[i];
            }
        }
        System.out.println(s);
	}
}
