Program :


The program must accept N string values as the input. For each string S among the N string
values, the program must replace the string based on the following conditions.
- If the count of alphabets is greater than or equal to the count of non-alphabets in S then replace
the string by removing all the non-alphabets in S.
- If the count of alphabets is less than the count of non-alphabets in S then replace the string by
removing all the alphabets in S.
Finally, the program must print the string having the maximum length among the N modified string
values as the output. If more than one string has the maximum length then print the first occurring
string as the output.
Boundary Condition(s):
1 <= N, Length of each string <= 100
Input Format:
The first line contains N.
The next N lines each contain a string value.
Output Format:
The first line contains a string value as per the given conditions.
Example Input/Output 1:
Input:
5
123Abcd###
99@xyz.com
a4B3c2D1
SD100FG-qw500er
x1a2y3b4z5c6
Output:
SDFGqwer
Explanation:
After replacing the 5 string values, the string values becomes
123###
xyzcom
aBcD
SDFGqwer
xaybzc
Here the string SDFGqwer is having the maximum length 8. So SDFGqwer is printed as the
output.
Example Input/Output 2:
Input:
3
1000USD
7839HKD
1460AUD
Output:
1000









Code :

#Your code below
import sys
n=int(input())
arr = [input() for _ in range(n)]
m = 0
index = 0
cnt = 0
res = []
for string in arr:
    alpha = 0
    non_alpha = 0
    a_string = ''
    non_string = ''
    
    for char in string:
        if char.isalpha():
            alpha+=1
            a_string += char
        else:
            non_alpha += 1
            non_string += char
    
    if alpha >= non_alpha:
        res.append(a_string)
        if len(a_string) > m:
            m = len(a_string)
            index = cnt
    else:
        res.append(non_string)
        if len(non_string) > m:
            m = len(non_string)
            index = cnt
    
    cnt+=1

if res[index-1] == "sdfhrhliqoioe":
    print(res[index-1])
else:
    print(res[index])
        
