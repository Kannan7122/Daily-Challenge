Program :


The program must accept a string S as the input. The program must replace every consonant by
the next nearest vowel. If there is no vowel after a consonant then it must be removed from the
string.
If there is no vowel in S, then print -1 as the output.
Boundary Condition(s):
1 <= Length of S <= 100
Input Format:
The first line contains the values of S.
Output Format:
The first line contains the string as per the condition or -1.
Example Input/Output 1:
Input:
request
Output:
eeuue
Explanation:
In the string request, the first vowel after r is e. So the string becomes eequest
In the string eequest, the first vowel after q is u. So the string becomes eeuuest
There is no vowel after s and t so they are removed. The string becomes eeuue
Hence the output is eeuue
Example Input/Output 3:
Input:
cry
Output:
-1




Code :

#include<stdio.h>
#include<stdlib.h>

int isvowel(char ch) {
    if(ch=='a' || ch=='A' || ch=='e' || ch=='E' || ch=='i' || ch=='I' || ch=='o' || ch=='O' || ch=='u' || ch=='U') {
        return 1;
    }
    else {
        return 0;
    }
}

int main()
{
    char ch[100];
    scanf("%s",ch);
    int n=strlen(ch);
    char res[n];
    int g=0,a=0;
    for(int i=0;i<n;i++) {
        if(isvowel(ch[i])==1) {
            while(a<=i) {
                res[g]=ch[i];
                g++;
                a++;
            }
        }
    }
    if(g==0)
    {
        printf("-1");
        return 0;
    }
    for(int i=0;i<g;i++) {
        printf("%c",res[i]);
    }
}
